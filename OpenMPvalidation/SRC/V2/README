 ============================================================================
|                   OpenMP Validation Suite  V 2.0                           | 
|  High Performance Computing Center Stuttgart & University of Houston       |
|                              Feb. 2006                                     | 
 ============================================================================


TABLE OF CONTENTS

I    	INTRODUCTION 
I.1.	  Aims and general function
I.2. 	  Files and directories

II	USAGE IV	MODIFYING AND CREATING OWN TESTS IV.1.	  Templates
II.1.	  Using the runtest script.

III	Adding and modifying tests
III.1.	  the template structure 
III.2.	  Adding tests to the test lists

------------------------------------------------------------------------------

I.  INTRODUCTION
==============================================================================

I.1.  Aims and general function
--------------------------------

The OpenMP validation suite is designed to verify the correct implementation
of OpenMP in compilers. It is capable of checking Fortran as well as c
compiler.

Testing the implementation is based on statistics. Each directive is tested
by computing and verifying the result with the already known value. In most 
cases a wrong implementation can result in the right values. So the tests are
run several times.

Additional the validation suite creates so called crosstests for each 
directive. These are tests in which either the directive is missing or used
with different arguments. If this so called crosstest fails this indicates 
strongly, that the previous test is capable of testing the directive.


I.2.  Files and directories
----------------------------


d c		directory containing the templates for the c tests
d fortran	directory containing the templates for the Fortran tests
  Makefile	Makefile containing options for compilation
  common_utility.f
  omp_my_sleep.h	thread save sleep function
  omp_testsuite.f	Fortran header file
  omp_testsuite.h	autogenerated c-header file
  ompts-c.conf		configuration file for the c tests about 
			how often the tests shall be executed or how large the 
			loop size is
  ompts_makeHeader.pl	perl module for automatically generation of an up to 
			date header file
  ompts_parserFunctions.pm	perl module containing general functions for
				the parser.pl script
  ompts_parser.pl	script for generating the source code out of the templates
  ompts_standaloneProc.c	framework for the c tests
  ompts_standaloneProc.f	framework for the Fortran tests
  README	the readme file you've already found ;-)
  runtest.pl	the frame program of the test suite
  testlist-f.txt	test list containing the available tests for Fortran
  testlist-c.txt	test list containing the available tests for c


------------------------------------------------------------------------------
 
II.  USAGE                                                                  
==============================================================================


II.1. Using the runtest script.
-------------------------------


Using the runtest.pl script is rather easy. You can use the the test suite only
after two steps of modifications:
 
1.) Modify the Makefile to your wishes choosing your compiler and the necessary
    compiler flags.  
2.) If necessary edit one of the test lists and comment out the tests you do not
    want to run using # at the beginning of a line. Testlists for Fortran end 
    with -f.txt while test lists for c with -c.txt.

And now you can run the test suite either for Fortran using
      make ctest
or for Fortran
      make ftest

The two commands above equal to: 
	#	>  ./runtest.pl -lang=fortran -d=fortran testlist-f.txt
or for c
	#	>  ./runtest.pl -lang=c -d=c testlist-c.txt


The test results are summarized in results.txt while *.log keep details for 
individual tests. There is also a file (compile.log) keeping compilation 
information.

With the test suite there come three test lists: One containing all tests, one
with the tests for version 1.0 of OpenMP and one with the tests for version
2.0/2.5 of OpenMP. 

If you don't want to test the directives in orphaned mode you can use the
-norphan option. You also can use the runtest.pl script either to compile all
tests or run compiled tests e.g. for cross compilation on other platforms. For
this there are the options -norun and -nocompile.

With the --help option you can show the complete list of options and their
explanations.

Happy testing!


------------------------------------------------------------------------------

III.	How to add new tests / The structure of test templates
==============================================================================

III.1  The template structure
------------------------------

The test suite is based on templates so that you only have one file for test,
crosstest and the orphaned versions of them.

	A) Description of the template structure

The syntax of the templates is much like xml. So each test begins with
'<ompts:test>' and ends with '</ompts:test>'.

In between there are several other blocks holding information:

- <ompts:testdescription> </ompts:testdescription> In between this tag you can
  give a description on what the test checks and how it works.

- <ompts:ompversion> </ompts:version> This tag is used to specify the
  OpenMP-version which includes the tested directive.

- <ompts:directive> </ompts:directive> Used to specify the directive how it is
  called in the programming language.

- <ompts:dependences> </ompts:dependences> With this tag you can specify other
  omp directives which are necessary for the correct execution of your test.
The directives have to be listed by their directive names as it is called in
the programming language. Multiple directives are separated by ','.

- <ompts:testcode> </ompts:testcode> In this tag stands the whole source code
  for the test / crosstest.  Each test has to be written as a function. The
syntax of the functions differs between C and Fortran: In C it has to take a
file pointer 'FILE * logFile' and return an int. If the test has been passed
successful it has to return 0. The file pointer can be used to write
information into a log file.  In Fortran the function takes no argument and the
function name must not exceed XX characters.  The return value has to be
specified using the '<testfunctionname>' tags. It has to be 1 if the test
succeeded and 0 if the test failed. For details see the example.

To tell the test suite the name of your test function you have to enclose it
into the '<ompts:testcode:functionname> </ompts:testcode:functionname>' tag.

If there are differences between test and crosstest you can use the
<ompts:check> </ompts:check> and <ompts:crosscheck> </ompts:crosscheck> tag.
When generating the test the parser will use the code enclosed in
<ompts:check> tags and cut out the code written in <ompts:crosscheck> tags. So
you have two possibilities to write your template for test and crosstest: The
first way you can write the complete code is to write the test in one
<ompts:check> tag and later the crosstest in one <ompts:crosscheck> tag.  The
second way is to write both tests only by enclosing differing parts in
corresponding tags.

The first method should be preferred if test and crosstest differ much from
each other. The second e.g. if you only want to change a few options like
replacing an omp singleprivate clause by an omp private clause or to cut out
a directive like omp flush.  When you use the first way you have to take care
of the function name! You have to declare it twice with
<ompts:testcode:functionname>!

- <ompts:orphan> </ompts:orphan> This tag can be used if you want to enable
  your test to check the directive in orphan regions, too.  The code enclosed
in this part will be written to a separate function which will be called
instead.  If you have variables which are used outside this region you have to
declare them as global variables enclosed in an <ompts:orphan:vars> tag. For
further information see the description of the <ompts:orphan:vars> tag.

- <ompts:orphan:vars> </ompts:orphan:vars> This tag is used to specify global
  variables for an orphan region which allow the exchange of values between
the main program and the orphaned functions. The usage differs between C and
Fortran.  In C you have to use a single declaration for each variable. You can
either declare all variables in one single or in several different regions. You
must not initialize the variables inside!  In Fortran you have to put all
declarations in one single tag. Because there exist no global variables as in
C you have to use common blocks. For further information see the examples.

III.2.  Adding tests to the test lists
--------------------------------------

After you have created a new test you have to add them to a testlist. Simply 
add the function name in a new Line into a file.
